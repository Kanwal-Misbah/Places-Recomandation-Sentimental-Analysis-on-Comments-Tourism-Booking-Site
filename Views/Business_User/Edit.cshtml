@model Fin.Models.Business_User

@{
    ViewBag.Title = "Edit";
}
@{
    Layout = "~/Views/Shared/_LayoutBusinessUser.cshtml";
    //Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    //Layout = "~/Views/Shared/_LayoutUser.cshtml";
    //Layout = "~/Views/Shared/_LayoutVisiter.cshtml";
}
<h2>Edit</h2>

@using (Html.BeginForm("Edit", "Business_User", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Business_User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Bus_User_Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bus_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bus_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bus_Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bus_Address, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bank_Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bank_Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bank_Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bank_Account_number, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bank_Account_number, new { htmlAttributes = new { @class = "form-control", pattern = "\\d{16}", title = "Please enter a 16-digit number." } })
                @Html.ValidationMessageFor(model => model.Bank_Account_number, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_Reg, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bus_Reg, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bus_Reg, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Bus_Email, new { htmlAttributes = new { @class = "form-control", id = "email", oninput = "validateEmail()" } })
                @Html.ValidationMessageFor(model => model.Bus_Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_Password, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="password" required class="form-control" name="Bus_Password" title="Password must be at least 8 characters long, contain a number, a special character, and both lowercase and uppercase alphabets. " pattern="(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$" />
                @Html.ValidationMessageFor(model => model.Bus_Password, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bus_logo, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="bus_img" />
                @if (!string.IsNullOrEmpty(Model.Bus_logo))
                {
                    <img style="width:50% ; height: 50%" src="@Url.Content(Model.Bus_logo)" />
                }
                else
                {
                    <span> No image available</span >
                }
                @Html.EditorFor(model => model.Bus_logo, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bus_logo, "", new { @class = "text-danger" })
            </div>
        </div>

        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>function validatePassword() {
        var passwordInput = document.getElementById("password");
        var password = passwordInput.value;

        var pattern = "^(?=.\d)(?=.[a-z])(?=.[A-Z])(?=.[$!%#?&])[A-Za-z\d$!%#?&]{8,}$";
        var isValid = pattern.test(password);

        if (!isValid) {
            passwordInput.setCustomValidity("Password contain a number, a special character, and both lowercase and uppercase alphabets.");

        } else {
            passwordInput.setCustomValidity("");
        }
    }
    function validateUsername() {
        var usernameInput = document.getElementById("username");
        var username = usernameInput.value;

        if (username.length <= 5) {
            usernameInput.setCustomValidity("Bussiness User name must be longer than 5 characters.");
        } else {
            usernameInput.setCustomValidity("");
        }
    }
    function validateEmail() {
        var emailInput = document.getElementById("email");
        var email = emailInput.value;

        var pattern = /[a-zA-Z0-9._%+-]+@@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/;
        var isValid = pattern.test(email);

        if (!isValid) {
            emailInput.setCustomValidity("Please enter a valid email address.");
        } else {
            emailInput.setCustomValidity("");
        }
    }
    </script>